{"mappings":";;ACAA;ACAA,IAAA,wCAGE,GAHa;IACb,aAAa,EAAE,CAAA,KAAK,GAAI,KAAK,CAAC,KAAK,OAAO;IAAA;IAC1C,WAAW,EAAE,CAAA,KAAK,GAAI,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC;CACtC;;;ADMc,uDAAiC,iBAAU;IACxD,8BAA8B,CAE9B,OAAO,OAAO,GAAG,cAAc,CAAC;IAEhC,OAAO,UAAU,GAAG;QAClB,QAAQ,EAAE,MAAM;QAChB,IAAI,EAAE,MAAM;QACZ,QAAQ,EAAE;YAAE,SAAS,EAAE,wCAAkB;SAAE;KAC5C,CAAC;IAEF,OAAO,KAAK,GAAG;QACb,IAAI,EAAE,MAAM;QACZ,MAAM,EAAE,QAAQ;QAChB,YAAY,EAAE,cAAc;KAC7B,CAAC;IAEF,OAAO,MAAM,GAAG,UAAG,CAAC;;;;EAIpB,CAAC,CAAC;IAEF,aAAc;QACZ,KAAK,EAAE,CAAC;QAER,6CAA6C,CAC7C,IAAI,CAAC,IAAI,GAAG,wCAAkB,CAAC,KAAK,CAAC,IAAI,CAAC;QAE1C,qBAAqB,CACrB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QAErB,uBAAuB,CACvB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;KACpB;IAED,iBAAiB,GAAG;QAClB,KAAK,CAAC,iBAAiB,EAAE,CAAC;QAC1B,MAAM,EA/CV,MA+CY,IAAI,CAAA,EAAE,GAAG,IAAI,AAAC;QAEtB,IAAI,CAAC;YAAC,QAAQ;YAAE,cAAc;SAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,EAC5C,IAAI,CAAC,OAAO,EAAE,CAAC;KAElB;IAED,OAAO,CAAC,OAAO,EAAE;QACf,IACE,AAAC,CAAA,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAA,IAC/C,IAAI,CAAC,IAAI,KAAK,cAAc,IAC5B,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAExB,OAAO,CAAC,GAAG,CACT,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAA,IAAI,GAAI,cAAc,CAAC,WAAW,CAAC,IAAI,CAAC;QAAA,CAAC,CAC5D,CAAC,IAAI,CAAC,IAAM,IAAI,CAAC,OAAO,EAAE;QAAA,CAAC,CAAC;KAEhC;IAED,OAAO,GAAG;QACR,MAAM,UAAU,GAAG,IAAI,CAAC,CAAC,UAAU,AAAC;QAEpC,IAAI,CAAC,UAAU,EACb,OAAO;QAGT,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;KACtD;IAED,IAAI,CAAC,UAAU,GAAG;QAChB,IAAI,IAAI,CAAC,QAAQ,EACf,OAAO,QAAQ,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QAGhD,MAAM,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,mBAAmB,CAAC,AAAC;QAE9D,OAAO,aAAa,CAAC;KACtB;CACF;AAED,cAAc,CAAC,MAAM,CAAC,wCAAkB,CAAC,OAAO,EAAE,wCAAkB,CAAC,CAAC;;ADvFtE;AAEA,cAAc,CAAC,MAAM,CAAC,wCAAe,CAAC,OAAO,EAAE,wCAAe,CAAC,CAAC","sources":["src/index.js","src/AutoTmplElement.js","src/tokenListConverter.js"],"sourcesContent":["import AutoTmplElement from './AutoTmplElement.js';\n\ncustomElements.define(AutoTmplElement.tagName, AutoTmplElement);\n","import { LitElement, css } from 'lit';\nimport tokenListConverter from './tokenListConverter';\n\n/**\n * @customElement tmpl-replace\n * @attr elements\n * @attr mode\n * @attr template\n */\nexport default class TmplReplaceElement extends LitElement {\n  /** @prop {String} template */\n\n  static tagName = 'tmpl-replace';\n\n  static properties = {\n    template: String,\n    mode: String,\n    elements: { converter: tokenListConverter },\n  };\n\n  static modes = {\n    AUTO: 'auto',\n    MANUAL: 'manual',\n    WHEN_DEFINED: 'when-defined',\n  };\n\n  static styles = css`\n    :host {\n      display: none !important;\n    }\n  `;\n\n  constructor() {\n    super();\n\n    /** @type {'auto'|'manual'|'when-defined'} */\n    this.mode = TmplReplaceElement.modes.AUTO;\n\n    /** @type {String} */\n    this.template = null;\n\n    /** @type {String[]} */\n    this.elements = [];\n  }\n\n  connectedCallback() {\n    super.connectedCallback();\n    const { mode } = this;\n\n    if (!['manual', 'when-defined'].includes(mode)) {\n      this.replace();\n    }\n  }\n\n  updated(changed) {\n    if (\n      (changed.has('mode') || changed.has('elements')) &&\n      this.mode === 'when-defined' &&\n      this.elements.length > 0\n    ) {\n      Promise.all(\n        this.elements.map(name => customElements.whenDefined(name))\n      ).then(() => this.replace());\n    }\n  }\n\n  replace() {\n    const templateEl = this.#templateEl;\n\n    if (!templateEl) {\n      return;\n    }\n\n    this.replaceWith(templateEl.content.cloneNode(true));\n  }\n\n  get #templateEl() {\n    if (this.template) {\n      return document.getElementById(this.template);\n    }\n\n    const templateChild = this.querySelector(':scope > template');\n\n    return templateChild;\n  }\n}\n\ncustomElements.define(TmplReplaceElement.tagName, TmplReplaceElement);\n","export default {\n  fromAttribute: value => value.split(/\\s+/),\n  toAttribute: value => value.join(' '),\n};\n"],"names":[],"version":3,"file":"module.js.map"}